{"version":3,"sources":["components/AddCategory.js","components/GifGridItem.js","helpers/getGifs.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setinputValue","onSubmit","e","preventDefault","trim","length","categories","type","value","onChange","target","placeholder","proTypes","PropTypes","func","isRequired","GifGridItem","title","url","className","src","alt","getGifs","category","a","fetch","resp","json","data","gifs","map","img","id","images","downsized_medium","GifGrid","loading","state","setState","useEffect","then","imgs","useFecthGifs","key","GifExpertApp","ReactDOM","render","document","getElementById"],"mappings":"gPAGaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EAEVC,mBAAS,IAFC,mBAEvCC,EAFuC,KAE3BC,EAF2B,KAiB9C,OACI,0BAAMC,SAVW,SAAEC,GACnBA,EAAEC,iBAEGJ,EAAWK,OAAOC,OAAS,IAC5BR,GAAe,SAAAS,GAAU,OAAKP,GAAL,mBAAoBO,OAC7CN,EAAc,OAMd,2BACIO,KAAK,OACLC,MAAOT,EACPU,SAlBc,SAACP,GACvBF,EAAeE,EAAEQ,OAAOF,QAkBhBG,YAAY,+BAO5Bf,EAAYgB,SAAW,CACnBf,c,OAAegB,EAAUC,KAAKC,YChC3B,IAAMC,EAAc,SAAC,GAAqB,IAAlBC,EAAiB,EAAjBA,MAAOC,EAAU,EAAVA,IAClC,OACI,yBAAKC,UAAU,0CACX,yBAAKC,IAAKF,EAAKG,IAAMJ,IACrB,2BAAIA,K,uBCNHK,EAAO,uCAAG,WAAQC,GAAR,uBAAAC,EAAA,6DACbN,EADa,iDACmCK,EADnC,+DAEAE,MAAOP,GAFP,cAEbQ,EAFa,gBAGIA,EAAKC,OAHT,uBAGXC,EAHW,EAGXA,KAEFC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC1B,MAAO,CACHC,GAAID,EAAIC,GACRf,MAAOc,EAAId,MACXC,IAAG,UAAEa,EAAIE,cAAN,aAAE,EAAYC,iBAAiBhB,QATvB,kBAaZW,GAbY,4CAAH,sDCKPM,EAAU,SAAC,GAAiB,IAAfZ,EAAc,EAAdA,SAAc,ECFZ,SAAEA,GAAe,IAAD,EAEdzB,mBAAS,CAC/B8B,KAAM,GACNQ,SAAS,IAJ2B,mBAEjCC,EAFiC,KAE1BC,EAF0B,KAiBxC,OAVAC,qBAAW,WACPjB,EAASC,GACJiB,MAAM,SAAAC,GACHH,EAAS,CACLV,KAAMa,EACNL,SAAS,SAGtB,CAAEb,IAEEc,EDb0BK,CAAcnB,GAAlCU,EAFuB,EAE5BL,KAAaQ,EAFe,EAEfA,QAErB,OACI,oCACI,wBAAIjB,UAAU,qCAAsCI,GAElDa,GAAW,uBAAGjB,UAAU,qCAAb,cAEb,yBAAKA,UAAU,aAEPc,EAAOH,KAAK,SAAAC,GAAG,OACX,kBAAC,EAAD,eACIY,IAAMZ,EAAIC,IACLD,UEQlBa,EAxBM,WAAO,IAAD,EAEa9C,mBAAS,IAFtB,mBAEhBQ,EAFgB,KAEJT,EAFI,KAIvB,OACI,oCACI,4CACA,kBAAC,EAAD,CAAaA,cAAeA,IAC5B,6BAEA,4BAEQS,EAAWwB,KAAI,SAAAP,GAAQ,OACnB,kBAAC,EAAD,CACIoB,IAAKpB,EACLA,SAAUA,U,MCXtCsB,IAASC,OACL,kBAAC,EAAD,MACFC,SAASC,eAAe,W","file":"static/js/main.d8b7297c.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nexport const AddCategory = ({ setCategories }) => {\n\n    const [inputValue, setinputValue] = useState('');\n\n    const handleInputChange = (e) => {\n        setinputValue( e.target.value );\n    }\n\n    const handleSubmit = ( e ) => {\n        e.preventDefault();\n\n        if ( inputValue.trim().length > 2 ){\n            setCategories( categories => [inputValue, ...categories ]);\n            setinputValue('');\n        }\n    }\n\n    return (\n        <form onSubmit={handleSubmit}>\n            <input \n                type='text'\n                value={inputValue}\n                onChange={handleInputChange}\n                placeholder='Escribe una categorÃ­a'\n                \n            />\n        </form>\n    )\n}\n\nAddCategory.proTypes = {\n    setCategories: PropTypes.func.isRequired\n}\n","import React from 'react';\n\nexport const GifGridItem = ( { title, url} ) => {\n    return (\n        <div className='card animate__animated animate__fadeIn'>\n            <img src={url} alt={ title } />\n            <p>{title}</p>         \n        </div>\n    )\n}\n","export const getGifs = async ( category ) => {\n    const url = `https://api.giphy.com/v1/gifs/search?q=${category}&limit=10&api_key=jVsq7u1b5AOnr9ugHqHzmzv8evtviVRz`;\n    const resp = await fetch( url );\n    const { data } = await resp.json();\n\n    const gifs = data.map( img => {\n        return {\n            id: img.id,\n            title: img.title,\n            url: img.images?.downsized_medium.url\n        }\n    })\n\n    return gifs;\n}","import React from 'react'\nimport { GifGridItem } from './GifGridItem'\nimport { useFecthGifs } from '../hooks/useFetchGifs'\n\n\nexport const GifGrid = ({ category}) => {\n\n    const { data:images, loading } = useFecthGifs( category );\n\n    return (\n        <>\n            <h3 className='animate__animated animate__fadeIn'>{ category }</h3>\n\n            { loading && <p className='animate__animated animate__fadeIn'>Loading...</p> }\n\n            <div className='card-grid'>\n                {\n                    images.map( img => (\n                        <GifGridItem \n                            key={ img.id }\n                            { ...img }\n                        />\n                    ))\n                }\n            </div>\n        </>\n    )\n}\n","import { useState, useEffect } from 'react';\nimport { getGifs } from '../helpers/getGifs';\n\nexport const useFecthGifs = ( category ) => {\n\n    const [state, setState] = useState({\n        data: [],\n        loading: true\n    });\n\n    useEffect( () => {\n        getGifs( category )\n            .then( imgs => {\n                setState({\n                    data: imgs,\n                    loading: false\n                });\n            })\n    }, [ category ])\n\n    return state; // {data: [], loading: true }\n}","import React, { useState } from 'react';\nimport { AddCategory } from './components/AddCategory';\nimport { GifGrid } from './components/GifGrid';\n\nconst GifExpertApp = () => {\n\n    const [categories, setCategories] = useState([]);\n\n    return (\n        <>\n            <h2>GifExpertApp</h2>\n            <AddCategory setCategories={setCategories} />\n            <hr />\n\n            <ol>\n                {\n                    categories.map(category =>\n                        <GifGrid\n                            key={category}\n                            category={category}\n                        />\n                    )\n                }\n            </ol>\n\n        </>\n    )\n}\nexport default GifExpertApp;","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport GifExpertApp from './GifExpertApp'\n\nimport './index.css';\n\n\nReactDOM.render(\n    <GifExpertApp />,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}